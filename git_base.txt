git 常见操作

1.0 创建git版本库
mkdir learngit
cd learngit
git init  


2.0 添加git版本库
vim readme.txt 
git add readme.txt
报错 git add -A
warning: LF will be replaced by CRLF in file
    The file will have its original line endings in your working directory.
    该文件将在您的工作目录中有原始的行结束。


2.1 文件提交到版本库
git commit -m ‘xxxx’

3.0 历史记录 
 git log
 git log —pretty=oneline
 git reset —hard HEAD^ 退回上一个版本
 git reset —hard [ commit id ] 根据commit id 找到这个版本 切记你知道这个id
 git reflog 查看历史命令 吃后悔药的命令

 总结:
HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本



4.0 git 工作区

自己创建 git 本地目录 例如learngit



版本库 Repository

工作区有一个隐藏的目录.git ,这个不算工作区， 而是git的版本库



：git版本库里

stage 或 index 的暂存区

git默认创建一个master分支，以及master的指针HEAD


第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；

第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支

因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。

git status 查看当前的工作区 暂存区里的内容变化

Untracked 为添加到版本库的状态

git add 命令会把提交的文件修改放到暂存区（Stage）

git commit 就可以一次性把暂存区所有的修改提交到分支

git status
# On branch master
nothing to commit (working directory clean)
现在版本库变成了这样，暂存区就没有任何内容了

暂存区 （Stage）是空的

HEAD 指向的 master分支会多出最新的提交

git status

Changes not staged for commit 未提交的更改
Changes to be committed 要提交的更改



提交后，用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别：

git diff HEAD — readme.txt


git checkout -- file可以丢弃工作区的修改

用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区：
git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。


git reset HEAD readme.txt 

git checkout -- file丢弃工作区的修改

执行以上两条命令 就可以退回去了

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，（可以版本退回），不过前提是没有推送到远程库。



删除文件



rm test.txt

git rm test.txt

git commit -m “彻底删掉了” 小心执行这一步


(1)删除找回1
rm test.txt
git checkout -- file找回文件

(2)删除找回2
git rm test.txt
git reset HEAD test.txt
git checkout -- file
      命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。



	远程仓库
	
	1 关联远程仓库
$ git remote add origin git@github.com:michaelliao/learngit.git
git@github.com:michaelliao/learngit.git 远程仓库地址
origin 远程库的名字
 git push -u origin master
把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。

由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。

总结：
要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！



	2 从远程仓库克隆

$ git clone git（ssh）@github.com:michaelliao/gitskills.git

分支管理 （重点）

在版本退回里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。

创建分支
第一种
$ git checkout -b dev
Switched to a new branch ‘dev'
第二种
$ git branch dev
$ git checkout dev
Switched to branch ‘dev'
查看分支
git branch
*dev *号表示当前使用分支
mastar

例子
已更新一个文件为例子 file.txt 
git checkout -b devgi-
vim file.txt  修改
git add file.txt
git commit -m “branch test”
git branch

git checkout master 切换回主分支
cat file.txt 修改前的样子

git merge dev 合并dev分支到当前分支

查看file.txt 发现文件已更新。
git branch -d dev

注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。

当然，也不是每次合并都能Fast-forward，我们后面会讲其他方式的合并。
总结：
查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>


解决冲突
准备新的feature1分支，继续我们的新分支开发：
$ git checkout -b feature1
Switched to a new branch ‘feature1'

用新分支 在文件的最后一行 输入字符 随意 例如 ABC 然后git add git commit
git checkout -b feature1
git add file.txt
git commit -m “ABC"

切换master分支在最后一行修改 例如 BCD 然后 git add git commit
git checkout master
git add file.txt
git commit -m “BCD"

合并分支 
git merge feature1

git status
冲突信息提示

手动修改冲突的文件  解决后在次提交 git add 冲突文件  git commit 冲突文件


$ git log --graph --pretty=oneline --abbrev-commit
冲突的线条

用git log --graph命令可以看到分支合并图。



分支管理策略
通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。

如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。


 git merge --no-ff -m "merge with no-ff" dev
 git log --graph --pretty=oneline --abbrev-commit

  不使用Fast forward 会保留分支的信息

///////////////////////////////////////////////////////////////////////////////
    1.忽略文件操作
        1.1 添加文件 vim .gitignore
        1.2 执行 touch .gitignore
        1.3 修改全局的.gitignore文件，创建自己的文件 git config --global core.excludesfile ~/.gitignore_global

    2.推送文件 git push 命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相似。
        2.1 git push origin master （git push <远程主机名> <本地分支名>:<远程分支名>）

    3.git 查看远程分支、本地分支、删除本地分支
        3.1 查看远程分支
        git branch -a
        git branch -r
        3.2 查看本地分支
        git branch
        3.3 删除本地分支
        git branch -d 分支名称


    4.git 查看远程仓库信息 （ git remote show origin ）
        4.1 查看远程仓库地址
        git remote -v


    5.git 拉取分支下的文件或者文件夹
        5.1 拉取分支文件夹
        git checkout 分支名称（master） 分支文件夹（branch ）

    6.git tag 标签相关操作
        6.1 git 创建标签
        git tag v0.1.2-light 创建轻量标签
        git tag -a v1.0 -m '1.0 版本' 创建附注标签
        6.2 git 切换到标签
        git checkout v1.0
        6.3 git 删除标签
        git tag -d v1.0
        6.4 git 标签发布
        git push origin v1.0 将v0.1.2标签提交到git服务器
        git push origin --tags 将本地所有标签一次性提交到git服务器






      


